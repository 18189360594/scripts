#!/usr/bin/perl

#Copyright (c) 2005 Apple Computer, Inc.  All Rights Reserved.
#
#This program is free software; you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation; either version 2 of the License, or
#(at your option) any later version.
#
#This program is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.
#
#You should have received a copy of the GNU General Public License
#along with this program; if not, write to the Free Software
#Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

=pod

=head1 SYNOPSIS

buildfink -- Build every package in Fink

=head1 USAGE

	buildfink [-n] [--infofilter SCRIPT] [--patchdir DIR] [--skip PACKAGE] [--skip PACKAGE] [--validate] [--build-as-nobody] FINKDIR OUTDIR
	buildfink [-r CHECKPOINT]

C<buildfink> builds every package in Fink, taking care of things like avoiding repeated building
of packages and maintaining a log for every package build.  It collects all of the logs, package
files, and built packages under a single output directory tree.

C<FINKDIR> specifies the root of your Fink installation; this is usually C</sw>.

C<OUTDIR> specifies the path to the output directory; this directory must not already exist.

If C<-n> is given, the script will do nothing but emit an ordered list of packages that it would
build and exit.

The C<--infofilter> option, if specified, allows the package .info and .patch files to be filtered
prior to building packages.  The specified script will be invoked with the basename of the info
or patch file as an argument and will receive the contents of the file on standard output; it should
emit the modified file on standard output.  Note that even if this option is not spcified, the
.info files used by buildfink will differ from the standard ones; we increment the revision number
of every package we build to ensure that buildfink's .info file is used.

The C<--patchdir> option, if specified, allows you to have an extra directory of .info and
.patch files which will be inserted into the package tree.  Any files
obtained via this mechanism are not subject to filtering via C<--infofilter>.

The C<--skip> option, which may be specified multiple times, allows the given package to be skipped.
Skipped packages will not be built, nor will any packages which depend on them.

The C<--validate> option, if specified, causes buildfink to validate packages
as it builds them.

The C<--build-as-nobody> option, if present, causes buildfink to build
packages as "nobody" instead of root; if C<--build-as-nobody=try> is specified,
it will try building as root if that fails and keep track of which packages
only succeed when built as root.

=head2 CHECKPOINTS

Sometimes there will be system issues partway through a build.  For instance, a recalcitrant
package can get stuck in a log-spewing loop, which will result in a build log which fills up the
disk.  Or maybe there will be a power outage.  Thus, buildfink dumps its state to disk after
every package build in the file C<checkpoint> inside the build directory.  The C<-r> option can be
used to resume a run from a checkpoint file.

=cut

use strict;
use warnings;
use File::Basename;
use File::Copy;
use File::Find;
use Data::Dumper;
use POSIX qw(dup2);
use Getopt::Long;
use FindBin qw($Bin);
use lib "$Bin";
use FinkLib;

our($Bin, $FinkConfig, $FinkDir, $rundir, $dryrun, $infofilter, $patchdir, @skiplist, $checkpoint, $DoValidate, $BuildNobody);
our $VERSION = '$Revision$';

my $opts_ok = GetOptions(
	"n" => \$dryrun,
	"infofilter=s" => \$infofilter,
	"patchdir=s" => \$patchdir,
	"skip=s" => \@skiplist,
	"r=s" => \$checkpoint,
	"validate" => \$DoValidate,
	"build-as-nobody:s" => \$BuildNobody
);
if(@ARGV != 2 and not (($dryrun and @ARGV == 1) or $checkpoint)) {
	warn "You must specify a Fink directory and an output directory.\n";
	$opts_ok = 0;
} else {
	($FinkDir, $rundir) = @ARGV;
}
if($checkpoint and not -f $checkpoint) {
	warn "The specified checkpoint file does not exist.\n";
	$opts_ok = 0;
} elsif($checkpoint and ($dryrun or $infofilter or $patchdir or @skiplist or @ARGV)) {
	warn "You may not specify any other options when restoring from a checkpoint.\n";
	$opts_ok = 0;
}
if($FinkDir and not -d $FinkDir) {
	warn "The specified Fink directory does not exist.\n";
	$opts_ok = 0;
} elsif($FinkDir and not -x "$FinkDir/bin/fink") {
	warn "The specified Fink directory does not appear to contain a Fink installation.\n";
	$opts_ok = 0;
}
if(!$dryrun and $rundir and -d $rundir) {
	warn "The specified output directory already exists.\n";
	$opts_ok = 0;
}
if($infofilter and not -x $infofilter) {
	warn "The specified info filter cannot be executed.\n";
	$opts_ok = 0;
}
if($patchdir and not -d $patchdir) {
	warn "The specified patch directory does not exist or is not a directory.\n";
	$opts_ok = 0;
}
if($BuildNobody and $BuildNobody ne "try") {
	warn "The only valid value for '--build-as-nobody' is 'try'.\n";
	$opts_ok = 0;
}

if(!$opts_ok) {
	die "See 'perldoc $0' for more information.\n";
}


if($checkpoint) {
	restoreCheckpoint($checkpoint);
	exit();
}


restoreSystem();
prepSystem();
FinkLib::purgeNonEssential();

# Rebuild the package database, just to be paranoid.
scanPackages();

removeBuildLocks();
my(@pkglist) = Fink::Package->list_packages();

if(!$dryrun) {
	# Then copy the .info files to our private repository and patch them if necessary.
	patchPackages(@pkglist);

	# Only let Fink see our modified packages
	injectPackages();

	# Now that we've patched the info files, rebuild the package database again.
	scanPackages();
}

# Now order the list of packages in dependency order, so that all of X's
# dependencies come before X.  Filter out all of the split-offs, so we only
# build root packages, and then remove everything on the skip list and anything
# which depends on anything on the skip list.
my(%deps) = getAllDepends(\@pkglist);
my(@orderedPkgs) = filterSplitOffs(orderByDepends(\@pkglist, \%deps));

if($dryrun) {
	print join("\n", @orderedPkgs), "\n";
	exit;
}

# Now do the run
initCheckpoint(\@orderedPkgs, \%deps, {});
FinkLib::installEssentials();
buildAll(\@orderedPkgs, \@skiplist, \%deps, {});
doLog("Done building");

restoreSystem();

### ==== buildfink framework functions ====

# Prepare the system
sub prepSystem {
	$FinkConfig = FinkLib::initFink($FinkDir);

	return if $dryrun;

	mkdir($rundir);
	mkdir("$rundir/$_") for qw(pkginfo logs src out validate nobody);
	mkdir("$rundir/pkginfo/finkinfo");
	mkdir("$rundir/pkginfo/binary-darwin-powerpc");

	open(LOG, ">>", "$rundir/log.txt") or die "Couldn't open log: $!\n";

	# Make STDOUT and STDERR go to the log.
	close(STDOUT);
	close(STDERR);
	open(STDOUT, ">&", \*LOG);
	open(STDERR, ">&", \*LOG);
	select STDERR; $| = 1;
	select STDOUT; $| = 1;

	doLog('buildfink $Revision$');
	doLog("Skipping packages: " . join(" ", @skiplist));
	doLog("BuildVersion: " . `sw_vers -buildVersion 2>&1`);
	doLog(`gcc -v 2>&1 | tail -1`);
	doLog(`ld -v 2>&1`);
}

sub restoreSystem {
	unlink("$FinkDir/fink/dists/buildfink");
}

sub doLog {
	my($fmt, @args) = @_;

	print scalar(localtime()) . ": ";
	my($out) = sprintf($fmt, @args);
	chomp($out);
	print "$out\n";
}

sub doValidateWarn {
	my($pkg, $fmt, @args) = @_;

	open(VAL, ">>", "$rundir/validate/$pkg") or die "Couldn't open validation log for $pkg: $!\n";
	my($out) = sprintf($fmt, @args);
	chomp($out);
	print VAL "$out\n";
	close VAL;
}

# Log a package-specific failure
sub logPackageFail {
	my($pkg, $reason) = @_;
	open(LOG, ">$rundir/logs/$pkg.log");
	print LOG "Failed: $reason.\n";
	close LOG;
}

# Allow Fink to see our modified packages and only those packages
sub injectPackages {
	symlink("$rundir/pkginfo", "$FinkDir/fink/dists/buildfink");
	$FinkConfig->set_param("Trees" => "buildfink");
}

# Copy all package files to the buildfink repository and, if necessary,  patch the .info/.patch files.
sub patchPackages {
	my(@pkgnames) = @_;

	doLog("Patching packages.");

	foreach my $pkgname(@pkgnames) {
		next unless $pkgname;
		next if grep { $_ eq $pkgname } @skiplist;

		my $pkg;
		eval {
			$pkg = Fink::PkgVersion->match_package($pkgname);
		};
		if($@) {
			doLog("Couldn't get version for $pkgname: $@");
			next;
		}
		next if $pkg->is_type('dummy');

		my $info = $pkg->get_info_filename();
		if(!$info) {
			die "Couldn't get info for $pkgname: " . Data::Dumper::Dumper($pkg) . "\n";
		}

		my $dir = dirname($info);

		# There are a couple of packages where the package name is foo-bar
		# but the patch is named foo (namely, emacs21-nox).  We want to get any
		# .patch files along with their corresponding .info files.
		my $pkg2 = $pkgname;
		$pkg2 =~ s/(.*)-.*/$1/;

		opendir(INFODIR, $dir) or die "Couldn't open info directory $dir: $!\n";
		while(my $file = readdir(INFODIR)) {
			next if $file eq "." or $file eq ".." or $file eq "CVS";

			# We have a libpqpp-4.0.patch but not libpqpp-4.0 package.
			# Handle this as a special case...
			next unless
			  $file =~ /^\Q$pkgname\E/ or
			  $file =~ /^\Q$pkg2\E/ or
			  $file eq "libpqpp-4.0.patch";

			my $newfile = $file;

			if($file eq "libpqpp-4.0.patch") {
				$newfile = $file;
			}

			if($file =~ /\.(info|patch)$/) {
				patchFile("$dir/$file", "$rundir/pkginfo/finkinfo/$newfile");
			} else {
				copy("$dir/$file", "$rundir/pkginfo/finkinfo/$newfile") or die "Couldn't copy $dir/$file: $!\n";
			}
		}
		closedir(INFODIR);
	}

	if($patchdir) {
		opendir(PATCHDIR, $patchdir) or die "Couldn't open $patchdir: $!\n";
		my @extrapatches = grep {$_ ne "." and $_ ne ".."} readdir(PATCHDIR);
		closedir(PATCHDIR);
		foreach my $patch(@extrapatches) {
			copy("$patchdir/$patch", "$rundir/pkginfo/finkinfo/$patch");
		}
	}
}

# Patch a particular file with our specific modifications
sub patchFile {
	my($oldfile, $newfile) = @_;

	die "Copying file $oldfile to self!\n" if $oldfile eq $newfile;

	open(IN, "<", $oldfile) or die "Couldn't open $oldfile for reading: $!\n";
	local $/ = undef;
	my $in = <IN>;
	close IN;

	open(OUT, ">", $newfile) or die "Couldn't open $newfile for writing: $!\n";
	if($infofilter) {
		my $pid = open(FILTER, "|-");
		if(!defined($pid)) {
			die "Couldn't fork: $!\n";
		} elsif(!$pid) {
			close(STDOUT);
			dup2(fileno(OUT), 1);
			exec($infofilter, basename($newfile)) or die "Couldn't exec $infofilter: $!\n";
		} else {
			close OUT;
			print FILTER $in;
			close FILTER;
			wait();
		}
	} else {
		print OUT $in;
		close OUT;
	}
}

# Build all packages, skipping any with failed deps
# pkglist is a list of package names to build in order.
# skiplist is a list of package names to never build.
sub buildAll {
	my($pkgs, $skiplist, $deps, $failures) = @_;
	my %skiphash = map {$_ => 1} @$skiplist;

	# First, we set all uninstalled virtual packages as 'failed'.
	# We can't use them to satisfy dependencies and we can't build them...
	my $vpinfo = Fink::VirtPackage->list();
	while(my($pkgname, $hash) = each(%$vpinfo)) {
		$failures->{$pkgname} = 1 if $hash->{status} !~ / installed$/;
	}

	# Also set packages on the skiplist to failed
	$failures->{$_} = 1 foreach keys %skiphash;

	my %finkfiles;
	if($DoValidate) {
		Fink::Config::set_options({"Pedantic" => 1});

		# One of the validation steps is to identify files left in /sw
		# by the build process.
		find({no_chdir => 1, wanted => sub {
			$finkfiles{$File::Find::name} = 1;
		}}, $FinkDir);
	}

	my @newfails;
	PACKAGE: foreach my $pkg(@$pkgs) {
		doLog("Thinking about building $pkg");

		my $skipcause = "";
		if($skiphash{$pkg}) {
			$skipcause = "$pkg is on the skip list";
		} else {
			my $dep = findFailedDep($pkg, $deps, $failures);
			$skipcause = "Dependency $dep failed to build" if $dep;
		}

		if($skipcause) {
			logPackageFail($pkg, $skipcause);
			next;
		}

		my $obj;
		eval {
			$obj = Fink::PkgVersion->match_package($pkg);
		};
		if($@ or !$obj) {
			doLog("Couldn't get object for $pkg: $@");
			next;
		}

		next if $obj->is_type('dummy');

		if($DoValidate) {
			open(VAL, ">>", "$rundir/validate/$pkg") or die "Couldn't open validation log for $pkg: $!\n";
			my $oldfh = select(VAL);
			Fink::Validation::validate_info_file($obj->get_info_filename());
			select($oldfh);
			close(VAL);
		}

		doLog("Building package $pkg...");
		my $srcdir = $Fink::Config::buildpath; # Suppress "used only once" warning
		$srcdir = "$Fink::Config::buildpath/" . $obj->get_fullname();

		my $buildcmd = "printf '\n\n' | fink --yes";
		$buildcmd .= " --build-as-nobody" if $BuildNobody;
		$buildcmd .= " rebuild $pkg > $rundir/logs/$pkg.log 2>&1";
		my $ret = system($buildcmd);

		if($ret != 0 and defined($BuildNobody) and $BuildNobody eq "try") {
			$buildcmd =~ s/ --build-as-nobody//;
			move("$rundir/logs/$pkg.log", "$rundir/logs/$pkg.log.nobody");
			doLog("Build of $pkg failed, trying as root...");
			$ret = system($buildcmd);
			if($ret != 0) {
				unlink("$rundir/logs/$pkg.log.nobody");
			} else {
				move("$rundir/logs/$pkg.log.nobody", "$rundir/nobody/$pkg.log");
			}
		}
		
		if($ret != 0) {
			doLog("Build of $pkg failed!");
			$failures->{$pkg} = 1;
			push @newfails, $pkg;

			# Also, any splitoffs of this package have failed.
			my @relatives = getRelatives($obj);
			foreach (@relatives) {
				my $name = $_->get_name();
				$failures->{$name} = 1;
				push @newfails, $name;
			}

			system("mv", $srcdir, "$rundir/src/$pkg") or doLog("Couldn't move $srcdir to $rundir/src/$pkg: $!");
		} else {
			doLog("Build of $pkg succeeded!");
			system("rm", "-rf", $srcdir);


			my $deb = $obj->get_debname();
			move(readlink("$FinkDir/fink/debs/$deb"), "$rundir/pkginfo/binary-darwin-powerpc/$deb");
			unlink("$FinkDir/fink/debs/$deb");
			symlink("$rundir/pkginfo/binary-darwin-powerpc/$deb", "$FinkDir/fink/debs/$deb");

			foreach my $relative(getRelatives($obj)) {
				my $deb = $relative->get_debname();
				move(readlink("$FinkDir/fink/debs/$deb"), "$rundir/pkginfo/binary-darwin-powerpc/$deb");
				unlink("$FinkDir/fink/debs/$deb");
				symlink("$rundir/pkginfo/binary-darwin-powerpc/$deb", "$FinkDir/fink/debs/$deb");
			}
		}

		FinkLib::purgeNonEssential();

		if($DoValidate) {
			my @killqueue;

			find({no_chdir => 1, wanted => sub {
				if(/\.deb$/ or $_ =~ /fink\.build$/  or $File::Find::name eq "$FinkDir/var/lib/fink/finkinfodb") {
					$File::Find::prune = 1;
				} elsif(!$finkfiles{$File::Find::name}) {
					doValidateWarn($pkg, "Leftover file $File::Find::name");
					push @killqueue, $File::Find::name;
				}
			}}, $FinkDir);

			#system("rm", "-rf", @killqueue);
			$finkfiles{$_} = 1 foreach @killqueue;


			open(VAL, ">>", "$rundir/validate/$pkg") or die "Couldn't open validation log for $pkg: $!\n";
			my $oldfh = select(VAL);

			my $deb = "$rundir/pkginfo/binary-darwin-powerpc/" . $obj->get_debname();
			Fink::Validation::validate_dpkg_file($deb) if -f $deb;
			foreach my $relative(getRelatives($obj)) {
				my $deb = "$rundir/pkginfo/binary-darwin-powerpc/" . $relative->get_debname();
				Fink::Validation::validate_dpkg_file($deb) if -f $deb;
			}

			select($oldfh);
			close(VAL);
		}
	} continue {
		updateCheckpoint(@newfails);
		@newfails = ();
	}
}


### ==== Generic Fink-related functions ====

# Get split-offs of a package
sub getRelatives {
	my $obj = shift or return;

	# _relatives has been replaced by a real method in
	# Fink CVS.
	my @relatives = $obj->can("get_relatives") ? $obj->get_relatives() : @{$obj->{_relatives} || []};
	return @relatives;
}

# Buildlocks are how Fink stops a package from being built twice
# at the same time.  They can get left over if the system crashes
# while building a package.
sub removeBuildLocks {
	foreach my $pkgname (Fink::Package->list_packages()) {
		next unless $pkgname =~ /^fink-buildlock-.*/;
		system("dpkg", "-r", $pkgname);
	}
}

# Get dependency information
sub getAllDepends {
	my($pkglist) = @_;

	doLog("Getting dependency graph.");

	my %deps;
	foreach my $pkgname (@$pkglist) {
		$deps{$pkgname} = getDepends($pkgname);
	}

	return %deps;
}

# Order a list of packages in dependency order.
# pkglist is a listref of package names to order.
sub orderByDepends {
	my($pkglist, $deps) = @_;

	doLog("Getting dependency graph.");

	my(@ret, %revdeps);

	foreach my $pkgname (@$pkglist) {
		$deps{$pkgname} = getDepends($pkgname);
		$deps->{$pkgname}->{ordered} = 0;
		my $pkg = $deps->{$pkgname};

		# Build hash showing which packages are depended on by a given package
		foreach my $dep (@{$pkg->{build}}, @{$pkg->{run}}) {
			foreach my $deppkg (@$dep) {
				$revdeps{$deppkg} ||= [];
				push @{$revdeps{$deppkg}}, $pkgname;
			}
		}

		# Keep track of which dependencies we've satisfied
		$pkg->{unsatisfied} = {
			build => {map {$_ => 1} map {@$_} @{$pkg->{build}} },
			run => {map {$_ => 1} map {@$_} @{$pkg->{run}} }
		};
	}

	doLog("Ordering packages.");

	# Do a topological sort of the dependency graph.
	my @queue;

	# Force dtqa-finkenv to build first.
	# This package dumps the environment to standard out during the compile
	# phase and does nothing else.  We can use it to verify the build environment.
	# (e.g. see what environment variables Fink is setting for package builds.)
	if($deps->{'dtqa-finkenv'}) {
		push @ret, 'dtqa-finkenv';
		$deps->{'dtqa-finkenv'}->{ordered} = 2;
	}

	# First, bootstrap it with packages that have no dependencies.
	# Those'll be the virtual packages.
	my(%virtuals) = %{Fink::VirtPackage->list()};
	push @queue, keys(%virtuals);

	# Also, add in any non-virtual packages with no deps
	foreach my $pkgname(keys %deps) {
		next if $pkgname eq "dtqa-finkenv";
		my $dep = $deps->{$pkgname};
		next if keys %{$dep->{unsatisfied}->{build}} or keys %{$dep->{unsatisfied}->{run}};

		push @queue, $pkgname;

		# Also add split-offs of the package.
		my $obj;
		eval {
			$obj = Fink::PkgVersion->match_package($pkgname);
		};
		if($@) {
			doLog("Couldn't order $pkgname: $@");
			next;
		}

		my @relatives = getRelatives($obj);
		foreach (@relatives) {
			my $name = $_->get_name();
			push @queue, $name;
		}
	}

	doLog("Processing queue");

	while(@queue) {
		my $pkgname = shift @queue;

		#ordered==2 indicates that the package is installable as well as buildable
		next if $deps->{$pkgname}->{ordered} == 2;

		if(!$deps->{$pkgname}->{ordered} and not $virtuals{$pkgname}) {
			push @ret, $pkgname;
			$deps->{$pkgname}->{ordered} = 1;
		}

		# We will place packages on the queue if they are buildable.
		# However, the package can only be used to satisfy dependencies
		# if it is *installable*.
		next if !$virtuals{$pkgname} and keys(%{$deps->{$pkgname}->{unsatisfied}->{run}});

		$deps->{$pkgname}->{ordered} = 2;

		# For every package that is depended on by this one...
		foreach my $revdep (@{$revdeps{$pkgname}}) {
			my $dep = $deps->{$revdep};

			# Remove this one from the list of unsatisfied deps...
			delete $dep->{unsatisfied}->{run}->{$pkgname};
			delete $dep->{unsatisfied}->{build}->{$pkgname};

			# If we've satisfied all builddeps, we can build it.
			next if keys(%{$dep->{unsatisfied}->{build}});
			
			push @queue, $revdep;

			# And add any splitoffs
			my $obj;
			eval {
				$obj = Fink::PkgVersion->match_package($revdep);
			};
			if($@) {
				doLog("Couldn't order $obj: $@");
				next;
			}

			my @relatives = getRelatives($obj);
			foreach (@relatives) {
				my $name = $_->get_name();
				push @queue, $name;
			}
		}
	}

	foreach my $pkgname(keys %$deps) {
		my $dep = $deps->{$pkgname};
		next if $dep->{ordered};
		my(%unsats) = (%{$dep->{unsatisfied}->{build}}, %{$dep->{unsatisfied}->{run}});
		logPackageFail($pkgname, "Can't figure out how to build.  Unsatisfied dependencies: " . join(" ", sort keys %unsats));
	}

	return @ret;
}

# Get list of dependencies for a package
sub getDepends {
	my($pkgname) = @_;

	# create a variable to hold the main package's object
	my $pkgobj;
	eval {
		$pkgobj = Fink::PkgVersion->match_package($pkgname);
	};
	if($@) {
		doLog("Couldn't get object for $pkgname: $@");
		return;
	}

	# now get a list of references to packages
	my(@rundeps, @builddeps);
	# populate the @deplist with references to arrays of packages
	eval {
		@rundeps = $pkgobj->resolve_depends(0, "depends");
		@builddeps = $pkgobj->resolve_depends(2, "depends");
	};
	if($@) {
		doLog("Couldn't get dependencies for $pkgname: $@");
		return;
	}


	# Each item in @deplist is a list of alternative ways to satisfy the dependency.
	# So, it might looks something like:
	#
	# [[foo-dev], [xorg, xfree86, system-xfree86]]
	#

	my(%ret) = (build => [], run => []);
	foreach my $deps ({in => \@rundeps, out => $ret{run}}, {in => \@builddeps, out => $ret{build}}) {
		foreach my $dep (@{$deps->{in}}) {

			# If you have two versions of package X, both of them
			# will appear in the dependency list; we don't want those
			# duplicates, so keep track of what we've seen.
			my %alt_seen_pkgs;

			my @alternatives;

			foreach my $dp (@$dep) {
				# each $dp is a package object

				# get the name, so we can keep recursing
				my $next_dep = $dp->get_name();
				next if $alt_seen_pkgs{$next_dep}++;
			
				# don't bother recursing if it already has been seen or if it's the same pkg
				if(!$next_dep or $next_dep eq $pkgname) {
					next;
				} else {
					push @alternatives, $next_dep;
				}
			}

			push @{$deps->{out}}, \@alternatives;
		}
	}

	# and we're done!
	return \%ret;
}

# Find the first unsatisfiable dependency for a package.
# This may be a string containing multiple alternatives, ala "foo | bar | baz".
# If all dependencies can be satisfied, returns the empty string.
#
# We normally only check the build dependencies, unless the "rundeps" parameter is true.
# We set this parameter when recursing.  That's because we only need the builddeps
# satisfied in order to build a package, but those builddeps will need to be installed,
# so they need their runtime depends.
#
# pkgstack is used to avoid circular loops; its a hash of all the packages in the
# recursion chain for this lookup.  We'll ignore attempts to check something already
# in the chain.  depcache is used to avoid having to do repeated computations on
# the same package.
sub findFailedDep {
	my($pkg, $deps, $failures, $rundeps, $pkgstack, $depcache) = @_;
	$rundeps ||= 0;

	$pkgstack ||= {};
	$depcache ||= {};

	return $depcache->{$pkg} if exists($depcache->{$pkg});

	my @altsets = @{$deps->{$pkg}->{build} || []};
	push @altsets, @{$deps->{$pkg}->{run} || []} if $rundeps;

	foreach my $altset(@altsets) {
		my $satisfied = 0;

		foreach my $alt(@$altset) {
			next if
			  $failures->{$alt} or
			  $pkgstack->{$alt} or
			  findFailedDep($alt, $deps, $failures, 1, {%$pkgstack, $alt => 1}, $depcache);

			# We found a way to satisfy this set of alternatives.
			$satisfied = 1;
			last;
		}

		if(!$satisfied) {
			my $ret = join(" | ", @$altset);
			$depcache->{$pkg} = $ret;
			return $ret;
		}
	}

	$depcache->{$pkg} = "";
	return "";
}

# Rescan the .info files and rebuild the package database
sub scanPackages {
	Fink::Package->forget_packages(2, 0);
	Fink::Package->require_packages();
}

# Take a list of package names and filter out the ones which are split-offs.
# When we have a split-off in the list, replace it with its parent and suppress
# any further instances of members of that family.  This preserves our dependency
# ordering.
sub filterSplitOffs {
	my(@pkglist) = @_;
	my @ret;
	my %got_families;

	foreach my $pkgname(@pkglist) {
		next if $got_families{$pkgname};

		my $pkgobj;
		eval {
			$pkgobj = Fink::PkgVersion->match_package($pkgname);
		};
		if($@) {
			doLog("Couldn't get object for $pkgname: $@");
			next;
		}

		if($pkgobj->{parent}) {
			my $parent = $pkgobj->can("get_parent") ? $pkgobj->get_parent()->get_name() : $pkgobj->{parent}->get_name();

			next if $got_families{$parent};
			$got_families{$parent} = 1;
			push @ret, $parent;
		} else {
			$got_families{$pkgname} = 1;
			push @ret, $pkgname;
		}
	}

	return @ret;
}


### Checkpoint handling

sub restoreCheckpoint {
	my($checkpoint) = shift;
	my($orderedPkgs, $skiplist, $deps, $failures);

	# We use eval "STRING" so that the variables in the checkpoint are
	# bound to this sub's lexical scope.

	open(CHECKPOINT, $checkpoint) or die "Couldn't open checkpoint: $!\n";
	my $cpdata = join("", <CHECKPOINT>);
	close CHECKPOINT;
	eval "$cpdata" or die "Checkpoint didn't return true value.\n";
	die "$@\n" if $@;

	prepSystem();
	scanPackages();
	injectPackages();
	scanPackages();
	removeBuildLocks();

	doLog("Restored from checkpoint");
	@skiplist = @$skiplist;
	doLog("Building packages");
	buildAll($orderedPkgs, \@skiplist, $deps, $failures);
	doLog("Done building");
	restoreSystem();
}

sub initCheckpoint {
	my($orderedPkgs, $deps, $failures) = @_;

	open(CHECKPOINT, ">", "$rundir/checkpoint");

	print CHECKPOINT Data::Dumper->Dump(
		[$FinkDir, $rundir, $BuildNobody, $DoValidate, \@skiplist, $orderedPkgs, $deps, $failures],
		[qw(FinkDir rundir BuildNobody DoValidate skiplist orderedPkgs deps failures)]
	);

	close CHECKPOINT;
}

# Updates the checkpoint after a package build.
sub updateCheckpoint {
	my(@failed) = @_;

	open(CHECKPOINT, ">>", "$rundir/checkpoint");
	print CHECKPOINT "shift \@\$orderedPkgs;";
	print CHECKPOINT " \$failures->{'$_'} = 1;" foreach @failed;
	print CHECKPOINT "\n";
	close CHECKPOINT;
}
